// Generated by CoffeeScript 1.6.3
(function() {
  var Q, r, request, _create_method;

  Q = require('q');

  r = require('request');

  request = function(options) {
    var deferred, req;
    deferred = Q.defer();
    req = r(options, function(err, res) {
      if (err) {
        return deferred.reject(err);
      } else {
        return deferred.resolve(res);
      }
    });
    return deferred.promise;
  };

  _create_method = function(options, method) {
    var params, _ref, _request;
    params = r.initParams(options, null);
    params.options.method = method;
    if (typeof ((_ref = params.options) != null ? _ref._requester : void 0) === 'function') {
      _request = params.options._requester;
    } else {
      _request = request;
    }
    return _request(params.options);
  };

  request.get = function(options) {
    return _create_method(options, 'GET');
  };

  request.post = function(options) {
    return _create_method(options, 'POST');
  };

  request.put = function(options) {
    return _create_method(options, 'PUT');
  };

  request.patch = function(options) {
    return _create_method(options, 'PATCH');
  };

  request.head = function(options) {
    var deferred, req, _request;
    deferred = Q.defer();
    if (typeof (options != null ? options._requester : void 0) === 'function') {
      _request = options._requester;
    } else {
      _request = r;
    }
    req = _request.head(options, function(err, res) {
      if (err) {
        return deferred.reject(err);
      } else {
        return deferred.resolve(res);
      }
    });
    return deferred.promise;
  };

  request.del = function(options) {
    return _create_method(options, 'DELETE');
  };

  request.initParams = r.initParams;

  request.jar = r.jar;

  request.cookie = r.cookie;

  request.defaults = function(options) {
    var de, def, key, requester, _i, _len, _ref;
    if (options == null) {
      options = {};
    }
    if (typeof options._requester === 'function') {
      requester = options._requester;
    } else {
      requester = request;
    }
    def = function(method) {
      return function(opt) {
        var key, params, value;
        params = r.initParams(opt, null);
        for (key in options) {
          value = options[key];
          if (params.options[key] === void 0) {
            params.options[key] = value;
          }
        }
        params.options._requester = requester;
        return method(params.options);
      };
    };
    de = def(requester);
    _ref = ['get', 'post', 'put', 'patch', 'head', 'del', 'cookie'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      de[key] = def(requester[key]);
    }
    de.jar = requester.jar;
    de.defaults = function(opt) {
      var params, value;
      params = r.initParams(opt, null);
      for (key in options) {
        value = options[key];
        if (params.options[key] === void 0) {
          params.options[key] = value;
        }
      }
      params.options._requester = requester;
      return requester.defaults(params.options);
    };
    return de;
  };

  module.exports = request;

}).call(this);
